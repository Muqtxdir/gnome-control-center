From: =?utf-8?b?Ik1hcmNvIFRyZXZpc2FuIChUcmV2acOxbyki?= <mail@3v1n0.net>
Date: Thu, 27 May 2021 21:04:04 +0200
Subject: display: Ensure we list all the available scaling values

A display might support lots of scaling values, but gnome-control-center
does not show more than 5 possibilities, and these values are just
limited by the collected number.
So, when multiple scaling values are advertised, we just show the first
listed elements.

While it's correct to limit the values to show, we should ensure that
all the possible value are usable.

So, in case we have a number of applicable scaling that is more than
MAX_SCALE_BUTTONS, we ensure that the selected value is the central one
(if possible) and that all closer values are visible around.

In this way, by moving the selection is always possible to choose any
scale value.

Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/gnome-control-center/+bug/1795483
Origin: https://gitlab.gnome.org/GNOME/gnome-control-center/-/merge_requests/307
---
 panels/display/cc-display-config-dbus.c | 19 ++++++++-
 panels/display/cc-display-settings.c    | 71 ++++++++++++++++++++++++++++++++-
 2 files changed, 88 insertions(+), 2 deletions(-)

diff --git a/panels/display/cc-display-config-dbus.c b/panels/display/cc-display-config-dbus.c
index 6aa6c27..45e8b46 100644
--- a/panels/display/cc-display-config-dbus.c
+++ b/panels/display/cc-display-config-dbus.c
@@ -194,7 +194,24 @@ cc_display_mode_dbus_new (GVariant *variant)
                  &properties_variant);
 
   while (g_variant_iter_next (scales_iter, "d", &d))
-    g_array_append_val (self->supported_scales, d);
+    {
+      guint i;
+      gboolean found = FALSE;
+
+      for (i = 0; i < self->supported_scales->len; i++)
+        {
+          double val = g_array_index (self->supported_scales, double, i);
+
+          if (G_APPROX_VALUE (d, val, DBL_EPSILON))
+            {
+              found = TRUE;
+              break;
+            }
+        }
+
+      if (!found)
+        g_array_append_val (self->supported_scales, d);
+    }
 
   if (!g_variant_lookup (properties_variant, "is-current", "b", &is_current))
     is_current = FALSE;
diff --git a/panels/display/cc-display-settings.c b/panels/display/cc-display-settings.c
index 2e7d6f9..634538b 100644
--- a/panels/display/cc-display-settings.c
+++ b/panels/display/cc-display-settings.c
@@ -19,6 +19,7 @@
  * along with this program; if not, see <http://www.gnu.org/licenses/>.
  */
 
+#include <float.h>
 #include <handy.h>
 #include <glib/gi18n.h>
 #include <math.h>
@@ -224,6 +225,71 @@ sort_modes_by_freq_desc (CcDisplayMode *a, CcDisplayMode *b)
   return delta;
 }
 
+static gint
+compare_scales (gdouble *a, gdouble *b)
+{
+  return *a - *b;
+}
+
+static GArray *
+get_supported_scales (CcDisplaySettings *self,
+                      CcDisplayMode     *mode)
+{
+  const double *scales = cc_display_mode_get_supported_scales (mode);
+  GArray *supported_scales = g_array_new (TRUE, TRUE, sizeof (double));
+  int i;
+
+  for (i = 0; scales[i] != 0.0; i++)
+    {
+      if (!cc_display_config_is_scaled_mode_valid (self->config, mode, scales[i]))
+        continue;
+
+      g_array_append_val (supported_scales, scales[i]);
+    }
+
+  /* This is should be always true, but let's not trust mutter too much! */
+  g_array_sort (supported_scales, (GCompareFunc) compare_scales);
+
+  if (supported_scales->len > MAX_SCALE_BUTTONS)
+    {
+      double current_scale = cc_display_monitor_get_scale (self->selected_output);
+      int current_index = 0;
+
+      /* Too many values, let's remove all the ones around the current one */
+      for (i = supported_scales->len - 1; i > 0; i--)
+        {
+          double val = g_array_index (supported_scales, double, i);
+
+          if (G_APPROX_VALUE (current_scale, val, DBL_EPSILON))
+            {
+              current_index = i;
+              break;
+            }
+        }
+
+      for (i = supported_scales->len - 1; i > current_index + MAX_SCALE_BUTTONS / 2; i--)
+        {
+          g_array_remove_index (supported_scales, i);
+
+          if (supported_scales->len <= MAX_SCALE_BUTTONS)
+            return supported_scales;
+        }
+
+      if (current_index > MAX_SCALE_BUTTONS / 2)
+        {
+          for (i = 0; i < current_index;)
+            {
+              g_array_remove_index (supported_scales, i);
+
+              if (supported_scales->len <= MAX_SCALE_BUTTONS)
+                return supported_scales;
+            }
+        }
+    }
+
+  return supported_scales;
+}
+
 static gboolean
 cc_display_settings_rebuild_ui (CcDisplaySettings *self)
 {
@@ -233,6 +299,7 @@ cc_display_settings_rebuild_ui (CcDisplaySettings *self)
   CcDisplayMode *current_mode;
   GtkRadioButton *group = NULL;
   gint buttons = 0;
+  g_autoptr(GArray) supported_scales = NULL;
   const gdouble *scales, *scale;
 
   self->idle_udpate_id = 0;
@@ -392,7 +459,9 @@ cc_display_settings_rebuild_ui (CcDisplaySettings *self)
 
   /* Scale row is usually shown. */
   gtk_container_foreach (GTK_CONTAINER (self->scale_bbox), (GtkCallback) gtk_widget_destroy, NULL);
-  scales = cc_display_mode_get_supported_scales (current_mode);
+  supported_scales = get_supported_scales (self, current_mode);
+  scales = (const double *) supported_scales->data;
+
   for (scale = scales; *scale != 0.0; scale++)
     {
       g_autofree gchar *scale_str = NULL;
