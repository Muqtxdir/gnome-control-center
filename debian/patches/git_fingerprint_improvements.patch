From a0f028671c7a7861bb1ea7e8e983a074f288dde1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Fri, 11 Dec 2020 03:52:15 +0100
Subject: [PATCH 4/8] fingerprint-dialog: Add generic dialog actions state
 tracking

Use flags to track the dialog actions state so that we can:
 1. Remove multiple flags to track specific states
 2. Prevent starting again an action we're still waiting for completion
 3. Handle global visual elements (such as the busy spinner) correctly

Specifically point 3. allows to ensure that when doing concurrent
actions such as prints listing and device claiming, we will stop the
spinner only once all the operations are over.
---
 panels/user-accounts/cc-fingerprint-dialog.c | 133 ++++++++++++++-----
 1 file changed, 97 insertions(+), 36 deletions(-)

Index: gnome-control-center/panels/user-accounts/cc-fingerprint-dialog.c
===================================================================
--- gnome-control-center.orig/panels/user-accounts/cc-fingerprint-dialog.c
+++ gnome-control-center/panels/user-accounts/cc-fingerprint-dialog.c
@@ -31,10 +31,27 @@
 
 #include "config.h"
 
+#define CC_FPRINTD_NAME "net.reactivated.Fprint"
+
 /* Translate fprintd strings */
 #define TR(s) dgettext ("fprintd", s)
 #include "fingerprint-strings.h"
 
+typedef enum {
+  DIALOG_STATE_NONE                   = 0,
+  DIALOG_STATE_DEVICES_LISTING        = (1 << 0),
+  DIALOG_STATE_DEVICE_CLAIMING        = (1 << 1),
+  DIALOG_STATE_DEVICE_CLAIMED         = (1 << 2),
+  DIALOG_STATE_DEVICE_PRINTS_LISTING  = (1 << 3),
+  DIALOG_STATE_DEVICE_RELEASING       = (1 << 4),
+  DIALOG_STATE_DEVICE_ENROLL_STARTING = (1 << 5),
+  DIALOG_STATE_DEVICE_ENROLLING       = (1 << 6),
+  DIALOG_STATE_DEVICE_ENROLL_STOPPING = (1 << 7),
+  DIALOG_STATE_DEVICE_DELETING        = (1 << 8),
+
+  DIALOG_STATE_IDLE = DIALOG_STATE_DEVICE_CLAIMED | DIALOG_STATE_DEVICE_ENROLLING,
+} DialogState;
+
 struct _CcFingerprintDialog
 {
   GtkWindow parent_instance;
@@ -68,14 +85,12 @@ struct _CcFingerprintDialog
   GtkWidget      *prints_manager;
 
   CcFingerprintManager *manager;
+  DialogState           dialog_state;
   CcFprintdDevice      *device;
-  gboolean              claiming;
-  gboolean              device_claimed;
   gulong                device_signal_id;
   gulong                device_name_owner_id;
   GCancellable         *cancellable;
   GStrv                 enrolled_fingers;
-  const char           *enrolling_finger;
   guint                 enroll_stages_passed;
   guint                 enroll_stage_passed_id;
   gdouble               enroll_progress;
@@ -144,6 +159,104 @@ cc_fingerprint_dialog_new (CcFingerprint
                        NULL);
 }
 
+static gboolean
+update_dialog_state (CcFingerprintDialog *self,
+                     DialogState         state)
+{
+  if (self->dialog_state == state)
+    return FALSE;
+
+  self->dialog_state = state;
+
+  if (self->dialog_state == DIALOG_STATE_NONE ||
+      self->dialog_state == (self->dialog_state & DIALOG_STATE_IDLE))
+    {
+      gtk_spinner_stop (self->spinner);
+    }
+  else
+    {
+      gtk_spinner_start (self->spinner);
+    }
+
+  return TRUE;
+}
+
+static gboolean
+add_dialog_state (CcFingerprintDialog *self,
+                  DialogState          state)
+{
+  return update_dialog_state (self, (self->dialog_state | state));
+}
+
+static gboolean
+remove_dialog_state (CcFingerprintDialog *self,
+                     DialogState          state)
+{
+  return update_dialog_state (self, (self->dialog_state & ~state));
+}
+
+typedef struct
+{
+  CcFingerprintDialog *dialog;
+  DialogState          state;
+} DialogStateRemover;
+
+static DialogStateRemover *
+auto_state_remover (CcFingerprintDialog *self,
+                    DialogState          state)
+{
+  DialogStateRemover *state_remover;
+
+  state_remover = g_new0 (DialogStateRemover, 1);
+  state_remover->dialog = g_object_ref (self);
+  state_remover->state = state;
+
+  return state_remover;
+}
+
+static void
+auto_state_remover_cleanup (DialogStateRemover *state_remover)
+{
+  remove_dialog_state (state_remover->dialog, state_remover->state);
+  g_clear_object (&state_remover->dialog);
+  g_free (state_remover);
+}
+
+G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogStateRemover, auto_state_remover_cleanup);
+
+static const char *
+dbus_error_to_human (CcFingerprintDialog *self,
+                     GError              *error)
+{
+  g_autofree char *dbus_error = g_dbus_error_get_remote_error (error);
+
+  if (dbus_error == NULL)
+    { /* Fallback to generic */ }
+  else if (g_str_equal (dbus_error, CC_FPRINTD_NAME ".Error.ClaimDevice"))
+    return _("the device needs to be claimed to perform this action");
+  else if (g_str_equal (dbus_error, CC_FPRINTD_NAME ".Error.AlreadyInUse"))
+    return _("the device is already claimed by another process");
+  else if (g_str_equal (dbus_error, CC_FPRINTD_NAME ".Error.PermissionDenied"))
+    return _("you do not have permission to perform the action");
+  else if (g_str_equal (dbus_error, CC_FPRINTD_NAME ".Error.NoEnrolledPrints"))
+    return _("no prints have been enrolled");
+  else if (g_str_equal (dbus_error, CC_FPRINTD_NAME ".Error.NoActionInProgress"))
+    { /* Fallback to generic */ }
+  else if (g_str_equal (dbus_error, CC_FPRINTD_NAME ".Error.InvalidFingername"))
+    { /* Fallback to generic */ }
+  else if (g_str_equal (dbus_error, CC_FPRINTD_NAME ".Error.Internal"))
+    { /* Fallback to generic */ }
+
+  if (self->dialog_state & DIALOG_STATE_DEVICE_ENROLLING)
+    return _("Failed to communicate with the device during enrollment");
+
+  if (self->dialog_state & DIALOG_STATE_DEVICE_CLAIMED ||
+      self->dialog_state & DIALOG_STATE_DEVICE_CLAIMING)
+    return _("Failed to communicate with the fingerprint reader");
+
+  return _("Failed to communicate with the fingerprint daemon");
+}
+
 static void
 disconnect_device_signals (CcFingerprintDialog *self)
 {
@@ -170,11 +283,11 @@ cc_fingerprint_dialog_dispose (GObject *
 
   g_clear_handle_id (&self->enroll_stage_passed_id, g_source_remove);
 
-  if (self->device && self->device_claimed)
+  if (self->device && (self->dialog_state & DIALOG_STATE_DEVICE_CLAIMED))
     {
       disconnect_device_signals (self);
 
-      if (self->enrolling_finger)
+      if (self->dialog_state & DIALOG_STATE_DEVICE_ENROLLING)
         cc_fprintd_device_call_enroll_stop_sync (self->device, NULL, NULL);
       cc_fprintd_device_call_release (self->device, NULL, NULL, NULL);
     }
@@ -442,6 +555,7 @@ list_enrolled_cb (GObject      *object,
 {
   g_auto(GStrv) enrolled_fingers = NULL;
   g_autoptr(GError) error = NULL;
+  g_autoptr(DialogStateRemover) state_remover = NULL;
   CcFprintdDevice *fprintd_device = CC_FPRINTD_DEVICE (object);
   CcFingerprintDialog *self = user_data;
   guint n_enrolled_fingers = 0;
@@ -453,23 +567,23 @@ list_enrolled_cb (GObject      *object,
   if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
     return;
 
-  gtk_spinner_stop (self->spinner);
+  state_remover = auto_state_remover (self, DIALOG_STATE_DEVICE_PRINTS_LISTING);
+
   gtk_widget_set_sensitive (GTK_WIDGET (self->add_print_icon), TRUE);
 
-  if (self->device_claimed)
+  if (self->dialog_state & DIALOG_STATE_DEVICE_CLAIMED)
     gtk_widget_set_sensitive (GTK_WIDGET (self->prints_manager), TRUE);
 
   if (error)
     {
       g_autofree char *dbus_error = g_dbus_error_get_remote_error (error);
 
-      if (!dbus_error || !g_str_has_suffix (dbus_error, ".Error.NoEnrolledPrints"))
+      if (!dbus_error || !g_str_equal (dbus_error, CC_FPRINTD_NAME ".Error.NoEnrolledPrints"))
         {
           g_autofree char *error_message = NULL;
 
-          g_dbus_error_strip_remote_error (error);
           error_message = g_strdup_printf (_("Failed to list fingerprints: %s"),
-                                           error->message);
+                                           dbus_error_to_human (self, error));
           g_warning ("Listing of fingerprints on device %s failed: %s",
                      cc_fprintd_device_get_name (self->device), error->message);
           notify_error (self, error_message);
@@ -501,7 +615,9 @@ update_prints_store (CcFingerprintDialog
 
   g_assert_true (CC_FPRINTD_IS_DEVICE (self->device));
 
-  gtk_spinner_start (self->spinner);
+  if (!add_dialog_state (self, DIALOG_STATE_DEVICE_PRINTS_LISTING))
+    return;
+
   gtk_widget_set_sensitive (GTK_WIDGET (self->add_print_icon), FALSE);
   gtk_widget_hide (GTK_WIDGET (self->delete_prints_button));
 
@@ -533,9 +649,8 @@ delete_prints_cb (GObject      *object,
     {
       g_autofree char *error_message = NULL;
 
-      g_dbus_error_strip_remote_error (error);
       error_message = g_strdup_printf (_("Failed to delete saved fingerprints: %s"),
-                                       error->message);
+                                       dbus_error_to_human (self, error));
       g_warning ("Deletion of fingerprints on device %s failed: %s",
                  cc_fprintd_device_get_name (self->device), error->message);
       notify_error (self, error_message);
@@ -548,10 +663,12 @@ delete_prints_cb (GObject      *object,
 static void
 delete_enrolled_prints (CcFingerprintDialog *self)
 {
-  g_return_if_fail (self->device_claimed);
+  g_return_if_fail (self->dialog_state & DIALOG_STATE_DEVICE_CLAIMED);
+
+  if (!add_dialog_state (self, DIALOG_STATE_DEVICE_DELETING))
+    return;
 
   gtk_widget_set_sensitive (GTK_WIDGET (self->prints_manager), FALSE);
-  gtk_spinner_start (self->spinner);
 
   cc_fprintd_device_call_delete_enrolled_fingers2 (self->device,
                                                    self->cancellable,
@@ -651,7 +768,7 @@ handle_enroll_signal (CcFingerprintDialo
 {
   gboolean completed;
 
-  g_return_if_fail (self->enrolling_finger);
+  g_return_if_fail (self->dialog_state & DIALOG_STATE_DEVICE_ENROLLING);
 
   g_debug ("Device enroll result message: %s, done: %d", result, done);
 
@@ -727,11 +844,19 @@ handle_enroll_signal (CcFingerprintDialo
           const char *message;
 
           if (g_str_equal (result, "enroll-disconnected"))
-            message = _("Fingerprint device disconnected");
+            {
+              message = _("Fingerprint device disconnected");
+              remove_dialog_state (self, DIALOG_STATE_DEVICE_CLAIMED |
+                                         DIALOG_STATE_DEVICE_ENROLLING);
+            }
           else if (g_str_equal (result, "enroll-data-full"))
-            message = _("Fingerprint device storage is full");
+            {
+              message = _("Fingerprint device storage is full");
+            }
           else
-            message = _("Failed to enroll new fingerprint");
+            {
+              message = _("Failed to enroll new fingerprint");
+            }
 
           set_enroll_result_message (self, ENROLL_STATE_WARNING, message);
         }
@@ -744,6 +869,7 @@ enroll_start_cb (GObject      *object,
                  gpointer      user_data)
 {
   g_autoptr(GError) error = NULL;
+  g_autoptr(DialogStateRemover) state_remover = NULL;
   CcFprintdDevice *fprintd_device = CC_FPRINTD_DEVICE (object);
   CcFingerprintDialog *self = user_data;
 
@@ -752,17 +878,16 @@ enroll_start_cb (GObject      *object,
   if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
     return;
 
-  gtk_spinner_stop (self->spinner);
+  state_remover = auto_state_remover (self, DIALOG_STATE_DEVICE_ENROLL_STARTING);
 
   if (error)
     {
       g_autofree char *error_message = NULL;
 
-      self->enrolling_finger = NULL;
+      remove_dialog_state (self, DIALOG_STATE_DEVICE_ENROLLING);
 
-      g_dbus_error_strip_remote_error (error);
       error_message = g_strdup_printf (_("Failed to start enrollment: %s"),
-                                       error->message);
+                                       dbus_error_to_human (self, error));
       g_warning ("Enrollment on device %s failed: %s",
                  cc_fprintd_device_get_name (self->device), error->message);
       notify_error (self, error_message);
@@ -782,6 +907,7 @@ enroll_stop_cb (GObject      *object,
                 gpointer      user_data)
 {
   g_autoptr(GError) error = NULL;
+  g_autoptr(DialogStateRemover) state_remover = NULL;
   CcFprintdDevice *fprintd_device = CC_FPRINTD_DEVICE (object);
   CcFingerprintDialog *self = user_data;
 
@@ -790,8 +916,8 @@ enroll_stop_cb (GObject      *object,
   if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
     return;
 
-  self->enrolling_finger = NULL;
-  gtk_spinner_stop (self->spinner);
+  state_remover = auto_state_remover (self, DIALOG_STATE_DEVICE_ENROLLING |
+                                            DIALOG_STATE_DEVICE_ENROLL_STOPPING);
   gtk_widget_set_sensitive (self->enrollment_view, TRUE);
   gtk_stack_set_visible_child (self->stack, self->prints_manager);
 
@@ -799,9 +925,8 @@ enroll_stop_cb (GObject      *object,
     {
       g_autofree char *error_message = NULL;
 
-      g_dbus_error_strip_remote_error (error);
       error_message = g_strdup_printf (_("Failed to stop enrollment: %s"),
-                                       error->message);
+                                       dbus_error_to_human (self, error));
       g_warning ("Stopping enrollment on device %s failed: %s",
                  cc_fprintd_device_get_name (self->device), error->message);
       notify_error (self, error_message);
@@ -815,9 +940,11 @@ enroll_stop_cb (GObject      *object,
 static void
 enroll_stop (CcFingerprintDialog *self)
 {
-  g_return_if_fail (self->enrolling_finger);
+  g_return_if_fail (self->dialog_state & DIALOG_STATE_DEVICE_ENROLLING);
+
+  if (!add_dialog_state (self, DIALOG_STATE_DEVICE_ENROLL_STOPPING))
+    return;
 
-  gtk_spinner_start (self->spinner);
   gtk_widget_set_sensitive (self->enrollment_view, FALSE);
   cc_fprintd_device_call_enroll_stop (self->device, self->cancellable,
                                       enroll_stop_cb, self);
@@ -857,7 +984,10 @@ enroll_finger (CcFingerprintDialog *self
 
   g_return_if_fail (finger_id);
 
-  self->enrolling_finger = finger_id;
+  if (!add_dialog_state (self, DIALOG_STATE_DEVICE_ENROLLING |
+                               DIALOG_STATE_DEVICE_ENROLL_STARTING))
+    return;
+
   self->enroll_progress = 0;
   self->enroll_stages_passed = 0;
 
@@ -871,7 +1001,6 @@ enroll_finger (CcFingerprintDialog *self
   gtk_stack_set_visible_child (self->stack, self->enrollment_view);
   gtk_label_set_label (self->enroll_message, enroll_message);
   gtk_entry_set_text (self->enroll_print_entry, finger_name);
-  gtk_spinner_start (self->spinner);
 
   cc_fprintd_device_call_enroll_start (self->device, finger_id, self->cancellable,
                                        enroll_start_cb, self);
@@ -1025,23 +1154,23 @@ release_device_cb (GObject      *object,
     {
       g_autofree char *error_message = NULL;
 
-      g_dbus_error_strip_remote_error (error);
       error_message = g_strdup_printf (_("Failed to release fingerprint device %s: %s"),
                                        cc_fprintd_device_get_name (fprintd_device),
-                                       error->message);
-      g_warning ("%s", error_message);
+                                       dbus_error_to_human (self, error));
+      g_warning ("Releasing device %s failed: %s",
+                 cc_fprintd_device_get_name (self->device), error->message);
 
       notify_error (self, error_message);
       return;
     }
 
-  self->device_claimed = FALSE;
+  remove_dialog_state (self, DIALOG_STATE_DEVICE_CLAIMED);
 }
 
 static void
 release_device (CcFingerprintDialog *self)
 {
-  if (!self->device || !self->device_claimed)
+  if (!self->device || !(self->dialog_state & DIALOG_STATE_DEVICE_CLAIMED))
     return;
 
   disconnect_device_signals (self);
@@ -1089,19 +1218,18 @@ on_device_owner_changed (CcFprintdDevice
 
   if (!name_owner)
     {
-      if (self->device_claimed)
+      if (self->dialog_state & DIALOG_STATE_DEVICE_CLAIMED)
         {
           disconnect_device_signals (self);
 
-          if (self->enrolling_finger)
+          if (self->dialog_state & DIALOG_STATE_DEVICE_ENROLLING)
             {
               set_enroll_result_message (self, ENROLL_STATE_ERROR,
                                          C_("Fingerprint enroll state",
                                             "Problem Reading Device"));
-              self->enrolling_finger = NULL;
             }
 
-          self->device_claimed = FALSE;
+          remove_dialog_state (self, DIALOG_STATE_DEVICE_CLAIMED);
           claim_device (self);
         }
     }
@@ -1113,6 +1241,7 @@ claim_device_cb (GObject      *object,
                  gpointer      user_data)
 {
   g_autoptr(GError) error = NULL;
+  g_autoptr(DialogStateRemover) state_remover = NULL;
   CcFprintdDevice *fprintd_device = CC_FPRINTD_DEVICE (object);
   CcFingerprintDialog *self = user_data;
 
@@ -1121,28 +1250,30 @@ claim_device_cb (GObject      *object,
   if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
     return;
 
-  self->claiming = FALSE;
+  state_remover = auto_state_remover (self, DIALOG_STATE_DEVICE_CLAIMING);
 
   if (error)
     {
       g_autofree char *dbus_error = g_dbus_error_get_remote_error (error);
       g_autofree char *error_message = NULL;
 
-      if (dbus_error && g_str_has_suffix (dbus_error, ".Error.AlreadyInUse") &&
-          self->device_claimed)
+      if (dbus_error && g_str_equal (dbus_error, CC_FPRINTD_NAME ".Error.AlreadyInUse") &&
+          (self->dialog_state & DIALOG_STATE_DEVICE_CLAIMED))
          return;
 
-      g_dbus_error_strip_remote_error (error);
       error_message = g_strdup_printf (_("Failed to claim fingerprint device %s: %s"),
                                        cc_fprintd_device_get_name (self->device),
-                                       error->message);
-      g_warning ("%s", error_message);
+                                       dbus_error_to_human (self, error));
+      g_warning ("Claiming device %s failed: %s",
+                 cc_fprintd_device_get_name (self->device), error->message);
       notify_error (self, error_message);
       return;
     }
 
+  if (!add_dialog_state (self, DIALOG_STATE_DEVICE_CLAIMED))
+    return;
+
   gtk_widget_set_sensitive (self->prints_manager, TRUE);
-  self->device_claimed = TRUE;
   self->device_signal_id = g_signal_connect_object (self->device, "g-signal",
                                                     G_CALLBACK (on_device_signal),
                                                     self, G_CONNECT_SWAPPED);
@@ -1156,14 +1287,13 @@ claim_device (CcFingerprintDialog *self)
 {
   ActUser *user;
 
-  g_return_if_fail (!self->device_claimed);
+  g_return_if_fail (!(self->dialog_state & DIALOG_STATE_DEVICE_CLAIMED));
 
-  if (self->claiming)
+  if (!add_dialog_state (self, DIALOG_STATE_DEVICE_CLAIMING))
     return;
 
   user = cc_fingerprint_manager_get_user (self->manager);
   gtk_widget_set_sensitive (self->prints_manager, FALSE);
-  self->claiming = TRUE;
 
   cc_fprintd_device_call_claim (self->device,
                                 act_user_get_user_name (user),
@@ -1194,7 +1324,7 @@ on_stack_child_changed (CcFingerprintDia
       notify_error (self, NULL);
       update_prints_store (self);
 
-      if (!self->device_claimed)
+      if (!(self->dialog_state & DIALOG_STATE_DEVICE_CLAIMED))
         claim_device (self);
     }
   else if (visible_child == self->enrollment_view)
@@ -1261,13 +1391,18 @@ on_devices_list (GObject      *object,
                  gpointer      user_data)
 {
   g_autolist (CcFprintdDevice) fprintd_devices = NULL;
+  g_autoptr(DialogStateRemover) state_remover = NULL;
   g_autoptr(GError) error = NULL;
   CcFingerprintManager *fingerprint_manager = CC_FINGERPRINT_MANAGER (object);
   CcFingerprintDialog *self = CC_FINGERPRINT_DIALOG (user_data);
 
   fprintd_devices = cc_fingerprint_manager_get_devices_finish (fingerprint_manager,
                                                                res, &error);
-  gtk_spinner_stop (self->spinner);
+
+  if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+    return;
+
+  state_remover = auto_state_remover (self, DIALOG_STATE_DEVICES_LISTING);
 
   if (fprintd_devices == NULL)
     {
@@ -1275,10 +1410,9 @@ on_devices_list (GObject      *object,
         {
           g_autofree char *error_message = NULL;
 
-          g_dbus_error_strip_remote_error (error);
           error_message = g_strdup_printf (_("Failed to get fingerprint devices: %s"),
-                                           error->message);
-          g_warning ("%s", error_message);
+                                           dbus_error_to_human (self, error));
+          g_warning ("Retrieving fingerprint devices failed: %s", error->message);
           notify_error (self, error_message);
         }
 
@@ -1322,7 +1456,7 @@ cc_fingerprint_dialog_constructed (GObje
   bindtextdomain ("fprintd", GNOMELOCALEDIR);
   bind_textdomain_codeset ("fprintd", "UTF-8");
 
-  gtk_spinner_start (self->spinner);
+  add_dialog_state (self, DIALOG_STATE_DEVICES_LISTING);
   cc_fingerprint_manager_get_devices (self->manager, self->cancellable,
                                       on_devices_list, self);
 }
@@ -1364,7 +1498,7 @@ delete_prints_button_clicked_cb (CcFinge
 static void
 cancel_button_clicked_cb (CcFingerprintDialog *self)
 {
-  if (self->enrolling_finger)
+  if (self->dialog_state & DIALOG_STATE_DEVICE_ENROLLING)
     {
       g_cancellable_cancel (self->cancellable);
       g_set_object (&self->cancellable, g_cancellable_new ());
@@ -1381,7 +1515,7 @@ cancel_button_clicked_cb (CcFingerprintD
 static void
 done_button_clicked_cb (CcFingerprintDialog *self)
 {
-  g_return_if_fail (self->enrolling_finger);
+  g_return_if_fail (self->dialog_state & DIALOG_STATE_DEVICE_ENROLLING);
 
   g_debug ("Completing enroll operation");
   enroll_stop (self);
